version: "3.3"

services:
  v1:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: http/v1
      PORT: 4001
    depends_on:
      - nats
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw-v1.rule=PathPrefix(`/v1`)"
      # - "traefik.http.routers.api-gw-v1.rule=PathPrefix(`v1.local`)"
      - "traefik.http.services.api-gw-v1.loadbalancer.server.port=4001"
    networks:
      - internal

  v2:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: http/v2
      PORT: 3000
    depends_on:
      - nats
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.api-gw-v2.rule=Host(`v2.local`)"
      - "traefik.http.routers.api-gw-v2.rule=PathPrefix(`/v2`)"
      - "traefik.http.services.api-gw-v2.loadbalancer.server.port=3000"
    networks:
      - internal

  orderAggregate:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: socket/orderAggregate
    depends_on:
      - nats
    networks:
      - internal

  orderAggregateReplica:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: socket/orderAggregate
    depends_on:
      - nats
    networks:
      - internal

  helper:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: socket/helper
    depends_on:
      - nats
    networks:
      - internal

  order:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: socket/order
    depends_on:
      - mongo
      - nats
    networks:
      - internal

  products:
    build:
      context: .
    image: moleculer-demo
    env_file: docker-compose.env
    environment:
      SERVICES: socket/products
    depends_on:
      - mongo
      - nats
    networks:
      - internal

  mongo:
    image: mongo:4
    volumes:
      - data:/data/db
    networks:
      - internal

  nats:
    image: nats:2
    networks:
      - internal

  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default

networks:
  internal:

volumes:
  data:
